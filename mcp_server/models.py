# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:18:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AWSAccountIdType(RootModel[str]):
    root: str


class AlgorithmSpec(Enum):
    RSAES_PKCS1_V1_5 = 'RSAES_PKCS1_V1_5'
    RSAES_OAEP_SHA_1 = 'RSAES_OAEP_SHA_1'
    RSAES_OAEP_SHA_256 = 'RSAES_OAEP_SHA_256'


class AliasNameType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9:/_-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9:/_-]+$', min_length=1, max_length=256)


class AlreadyExistsException(RootModel[Any]):
    root: Any


class ArnType(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class BooleanType(RootModel[bool]):
    root: bool


class CiphertextType(RootModel[constr(min_length=1, max_length=6144)]):
    root: constr(min_length=1, max_length=6144)


class CloudHsmClusterIdType(RootModel[constr(min_length=19, max_length=24)]):
    root: constr(min_length=19, max_length=24)


class CloudHsmClusterInUseException(RootModel[Any]):
    root: Any


class CloudHsmClusterInvalidConfigurationException(RootModel[Any]):
    root: Any


class CloudHsmClusterNotActiveException(RootModel[Any]):
    root: Any


class CloudHsmClusterNotFoundException(RootModel[Any]):
    root: Any


class CloudHsmClusterNotRelatedException(RootModel[Any]):
    root: Any


class ConnectCustomKeyStoreResponse(BaseModel):
    pass


class ConnectionErrorCodeType(Enum):
    INVALID_CREDENTIALS = 'INVALID_CREDENTIALS'
    CLUSTER_NOT_FOUND = 'CLUSTER_NOT_FOUND'
    NETWORK_ERRORS = 'NETWORK_ERRORS'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    INSUFFICIENT_CLOUDHSM_HSMS = 'INSUFFICIENT_CLOUDHSM_HSMS'
    USER_LOCKED_OUT = 'USER_LOCKED_OUT'
    USER_NOT_FOUND = 'USER_NOT_FOUND'
    USER_LOGGED_IN = 'USER_LOGGED_IN'
    SUBNET_NOT_FOUND = 'SUBNET_NOT_FOUND'
    INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET = 'INSUFFICIENT_FREE_ADDRESSES_IN_SUBNET'
    XKS_PROXY_ACCESS_DENIED = 'XKS_PROXY_ACCESS_DENIED'
    XKS_PROXY_NOT_REACHABLE = 'XKS_PROXY_NOT_REACHABLE'
    XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND = 'XKS_VPC_ENDPOINT_SERVICE_NOT_FOUND'
    XKS_PROXY_INVALID_RESPONSE = 'XKS_PROXY_INVALID_RESPONSE'
    XKS_PROXY_INVALID_CONFIGURATION = 'XKS_PROXY_INVALID_CONFIGURATION'
    XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION = (
        'XKS_VPC_ENDPOINT_SERVICE_INVALID_CONFIGURATION'
    )
    XKS_PROXY_TIMED_OUT = 'XKS_PROXY_TIMED_OUT'
    XKS_PROXY_INVALID_TLS_CONFIGURATION = 'XKS_PROXY_INVALID_TLS_CONFIGURATION'


class ConnectionStateType(Enum):
    CONNECTED = 'CONNECTED'
    CONNECTING = 'CONNECTING'
    FAILED = 'FAILED'
    DISCONNECTED = 'DISCONNECTED'
    DISCONNECTING = 'DISCONNECTING'


class CustomKeyStoreHasCMKsException(RootModel[Any]):
    root: Any


class CustomKeyStoreIdType(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class CustomKeyStoreInvalidStateException(RootModel[Any]):
    root: Any


class CustomKeyStoreNameInUseException(RootModel[Any]):
    root: Any


class CustomKeyStoreNameType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class CustomKeyStoreNotFoundException(RootModel[Any]):
    root: Any


class CustomKeyStoreType(Enum):
    AWS_CLOUDHSM = 'AWS_CLOUDHSM'
    EXTERNAL_KEY_STORE = 'EXTERNAL_KEY_STORE'


class CustomerMasterKeySpec(Enum):
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    ECC_NIST_P256 = 'ECC_NIST_P256'
    ECC_NIST_P384 = 'ECC_NIST_P384'
    ECC_NIST_P521 = 'ECC_NIST_P521'
    ECC_SECG_P256K1 = 'ECC_SECG_P256K1'
    SYMMETRIC_DEFAULT = 'SYMMETRIC_DEFAULT'
    HMAC_224 = 'HMAC_224'
    HMAC_256 = 'HMAC_256'
    HMAC_384 = 'HMAC_384'
    HMAC_512 = 'HMAC_512'
    SM2 = 'SM2'


class DataKeyPairSpec(Enum):
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    ECC_NIST_P256 = 'ECC_NIST_P256'
    ECC_NIST_P384 = 'ECC_NIST_P384'
    ECC_NIST_P521 = 'ECC_NIST_P521'
    ECC_SECG_P256K1 = 'ECC_SECG_P256K1'
    SM2 = 'SM2'


class DataKeySpec(Enum):
    AES_256 = 'AES_256'
    AES_128 = 'AES_128'


class DateType(RootModel[datetime]):
    root: datetime


class DeleteAliasRequest(BaseModel):
    AliasName: AliasNameType


class DeleteCustomKeyStoreRequest(BaseModel):
    CustomKeyStoreId: CustomKeyStoreIdType


class DeleteCustomKeyStoreResponse(BaseModel):
    pass


class DependencyTimeoutException(RootModel[Any]):
    root: Any


class DescriptionType(RootModel[constr(min_length=0, max_length=8192)]):
    root: constr(min_length=0, max_length=8192)


class DisabledException(RootModel[Any]):
    root: Any


class DisconnectCustomKeyStoreRequest(BaseModel):
    CustomKeyStoreId: CustomKeyStoreIdType


class DisconnectCustomKeyStoreResponse(BaseModel):
    pass


class EncryptionAlgorithmSpec(Enum):
    SYMMETRIC_DEFAULT = 'SYMMETRIC_DEFAULT'
    RSAES_OAEP_SHA_1 = 'RSAES_OAEP_SHA_1'
    RSAES_OAEP_SHA_256 = 'RSAES_OAEP_SHA_256'
    SM2PKE = 'SM2PKE'


class EncryptionAlgorithmSpecList(RootModel[List[EncryptionAlgorithmSpec]]):
    root: List[EncryptionAlgorithmSpec]


class EncryptionContextKey(RootModel[str]):
    root: str


class EncryptionContextValue(RootModel[str]):
    root: str


class ExpirationModelType(Enum):
    KEY_MATERIAL_EXPIRES = 'KEY_MATERIAL_EXPIRES'
    KEY_MATERIAL_DOES_NOT_EXPIRE = 'KEY_MATERIAL_DOES_NOT_EXPIRE'


class ExpiredImportTokenException(RootModel[Any]):
    root: Any


class GetKeyRotationStatusResponse(BaseModel):
    KeyRotationEnabled: Optional[BooleanType] = None


class GrantIdType(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class GrantNameType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9:/_-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9:/_-]+$', min_length=1, max_length=256)


class GrantOperation(Enum):
    Decrypt = 'Decrypt'
    Encrypt = 'Encrypt'
    GenerateDataKey = 'GenerateDataKey'
    GenerateDataKeyWithoutPlaintext = 'GenerateDataKeyWithoutPlaintext'
    ReEncryptFrom = 'ReEncryptFrom'
    ReEncryptTo = 'ReEncryptTo'
    Sign = 'Sign'
    Verify = 'Verify'
    GetPublicKey = 'GetPublicKey'
    CreateGrant = 'CreateGrant'
    RetireGrant = 'RetireGrant'
    DescribeKey = 'DescribeKey'
    GenerateDataKeyPair = 'GenerateDataKeyPair'
    GenerateDataKeyPairWithoutPlaintext = 'GenerateDataKeyPairWithoutPlaintext'
    GenerateMac = 'GenerateMac'
    VerifyMac = 'VerifyMac'


class GrantOperationList(RootModel[List[GrantOperation]]):
    root: List[GrantOperation]


class GrantTokenType(RootModel[constr(min_length=1, max_length=8192)]):
    root: constr(min_length=1, max_length=8192)


class ImportKeyMaterialResponse(BaseModel):
    pass


class IncorrectKeyException(RootModel[Any]):
    root: Any


class IncorrectKeyMaterialException(RootModel[Any]):
    root: Any


class IncorrectTrustAnchorException(RootModel[Any]):
    root: Any


class InvalidAliasNameException(RootModel[Any]):
    root: Any


class InvalidArnException(RootModel[Any]):
    root: Any


class InvalidCiphertextException(RootModel[Any]):
    root: Any


class InvalidGrantIdException(RootModel[Any]):
    root: Any


class InvalidGrantTokenException(RootModel[Any]):
    root: Any


class InvalidImportTokenException(RootModel[Any]):
    root: Any


class InvalidKeyUsageException(RootModel[Any]):
    root: Any


class InvalidMarkerException(RootModel[Any]):
    root: Any


class KMSInternalException(RootModel[Any]):
    root: Any


class KMSInvalidMacException(RootModel[Any]):
    root: Any


class KMSInvalidSignatureException(RootModel[Any]):
    root: Any


class KMSInvalidStateException(RootModel[Any]):
    root: Any


class KeyIdType(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class KeyListEntry(BaseModel):
    KeyArn: Optional[ArnType] = None
    KeyId: Optional[KeyIdType] = None


class KeyManagerType(Enum):
    AWS = 'AWS'
    CUSTOMER = 'CUSTOMER'


class KeySpec(Enum):
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    ECC_NIST_P256 = 'ECC_NIST_P256'
    ECC_NIST_P384 = 'ECC_NIST_P384'
    ECC_NIST_P521 = 'ECC_NIST_P521'
    ECC_SECG_P256K1 = 'ECC_SECG_P256K1'
    SYMMETRIC_DEFAULT = 'SYMMETRIC_DEFAULT'
    HMAC_224 = 'HMAC_224'
    HMAC_256 = 'HMAC_256'
    HMAC_384 = 'HMAC_384'
    HMAC_512 = 'HMAC_512'
    SM2 = 'SM2'


class KeyState(Enum):
    Creating = 'Creating'
    Enabled = 'Enabled'
    Disabled = 'Disabled'
    PendingDeletion = 'PendingDeletion'
    PendingImport = 'PendingImport'
    PendingReplicaDeletion = 'PendingReplicaDeletion'
    Unavailable = 'Unavailable'
    Updating = 'Updating'


class KeyStorePasswordType(RootModel[SecretStr]):
    root: SecretStr


class KeyUnavailableException(RootModel[Any]):
    root: Any


class KeyUsageType(Enum):
    SIGN_VERIFY = 'SIGN_VERIFY'
    ENCRYPT_DECRYPT = 'ENCRYPT_DECRYPT'
    GENERATE_VERIFY_MAC = 'GENERATE_VERIFY_MAC'


class LimitExceededException(RootModel[Any]):
    root: Any


class LimitType(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MacAlgorithmSpec(Enum):
    HMAC_SHA_224 = 'HMAC_SHA_224'
    HMAC_SHA_256 = 'HMAC_SHA_256'
    HMAC_SHA_384 = 'HMAC_SHA_384'
    HMAC_SHA_512 = 'HMAC_SHA_512'


class MacAlgorithmSpecList(RootModel[List[MacAlgorithmSpec]]):
    root: List[MacAlgorithmSpec]


class MalformedPolicyDocumentException(RootModel[Any]):
    root: Any


class MarkerType(
    RootModel[constr(pattern=r'[\u0020-\u00FF]*', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[\u0020-\u00FF]*', min_length=1, max_length=1024)


class MessageType(Enum):
    RAW = 'RAW'
    DIGEST = 'DIGEST'


class MultiRegionKeyType(Enum):
    PRIMARY = 'PRIMARY'
    REPLICA = 'REPLICA'


class NotFoundException(RootModel[Any]):
    root: Any


class NullableBooleanType(RootModel[bool]):
    root: bool


class NumberOfBytesType(RootModel[conint(ge=1, le=1024)]):
    root: conint(ge=1, le=1024)


class OriginType(Enum):
    AWS_KMS = 'AWS_KMS'
    EXTERNAL = 'EXTERNAL'
    AWS_CLOUDHSM = 'AWS_CLOUDHSM'
    EXTERNAL_KEY_STORE = 'EXTERNAL_KEY_STORE'


class PendingWindowInDaysType(RootModel[conint(ge=1, le=365)]):
    root: conint(ge=1, le=365)


class PlaintextType(RootModel[SecretStr]):
    root: SecretStr


class PolicyNameType(RootModel[constr(pattern=r'[\w]+', min_length=1, max_length=128)]):
    root: constr(pattern=r'[\w]+', min_length=1, max_length=128)


class PolicyType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=131072,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=131072
    )


class PrincipalIdType(
    RootModel[constr(pattern=r'^[\w+=,.@:/-]+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[\w+=,.@:/-]+$', min_length=1, max_length=256)


class PublicKeyType(RootModel[constr(min_length=1, max_length=8192)]):
    root: constr(min_length=1, max_length=8192)


class PutKeyPolicyRequest(BaseModel):
    BypassPolicyLockoutSafetyCheck: Optional[BooleanType] = None
    KeyId: KeyIdType
    Policy: PolicyType
    PolicyName: PolicyNameType


class ReEncryptResponse(BaseModel):
    CiphertextBlob: Optional[CiphertextType] = None
    DestinationEncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    KeyId: Optional[KeyIdType] = None
    SourceEncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    SourceKeyId: Optional[KeyIdType] = None


class RegionType(
    RootModel[constr(pattern=r'^([a-z]+-){2,3}\d+$', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^([a-z]+-){2,3}\d+$', min_length=1, max_length=32)


class RetireGrantRequest(BaseModel):
    GrantId: Optional[GrantIdType] = None
    GrantToken: Optional[GrantTokenType] = None
    KeyId: Optional[KeyIdType] = None


class RevokeGrantRequest(BaseModel):
    GrantId: GrantIdType
    KeyId: KeyIdType


class ScheduleKeyDeletionRequest(BaseModel):
    KeyId: KeyIdType
    PendingWindowInDays: Optional[PendingWindowInDaysType] = None


class ScheduleKeyDeletionResponse(BaseModel):
    DeletionDate: Optional[DateType] = None
    KeyId: Optional[KeyIdType] = None
    KeyState_1: Optional[KeyState] = Field(None, alias='KeyState')
    PendingWindowInDays: Optional[PendingWindowInDaysType] = None


class SigningAlgorithmSpec(Enum):
    RSASSA_PSS_SHA_256 = 'RSASSA_PSS_SHA_256'
    RSASSA_PSS_SHA_384 = 'RSASSA_PSS_SHA_384'
    RSASSA_PSS_SHA_512 = 'RSASSA_PSS_SHA_512'
    RSASSA_PKCS1_V1_5_SHA_256 = 'RSASSA_PKCS1_V1_5_SHA_256'
    RSASSA_PKCS1_V1_5_SHA_384 = 'RSASSA_PKCS1_V1_5_SHA_384'
    RSASSA_PKCS1_V1_5_SHA_512 = 'RSASSA_PKCS1_V1_5_SHA_512'
    ECDSA_SHA_256 = 'ECDSA_SHA_256'
    ECDSA_SHA_384 = 'ECDSA_SHA_384'
    ECDSA_SHA_512 = 'ECDSA_SHA_512'
    SM2DSA = 'SM2DSA'


class SigningAlgorithmSpecList(RootModel[List[SigningAlgorithmSpec]]):
    root: List[SigningAlgorithmSpec]


class TagException(RootModel[Any]):
    root: Any


class TagKeyType(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValueType(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TrustAnchorCertificateType(RootModel[constr(min_length=1, max_length=5000)]):
    root: constr(min_length=1, max_length=5000)


class UnsupportedOperationException(RootModel[Any]):
    root: Any


class UpdateAliasRequest(BaseModel):
    AliasName: AliasNameType
    TargetKeyId: KeyIdType


class UpdateCustomKeyStoreResponse(BaseModel):
    pass


class UpdateKeyDescriptionRequest(BaseModel):
    Description: DescriptionType
    KeyId: KeyIdType


class UpdatePrimaryRegionRequest(BaseModel):
    KeyId: KeyIdType
    PrimaryRegion: RegionType


class VerifyMacResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None
    MacAlgorithm: Optional[MacAlgorithmSpec] = None
    MacValid: Optional[BooleanType] = None


class VerifyResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None
    SignatureValid: Optional[BooleanType] = None
    SigningAlgorithm: Optional[SigningAlgorithmSpec] = None


class WrappingKeySpec(Enum):
    RSA_2048 = 'RSA_2048'


class XksKeyAlreadyInUseException(RootModel[Any]):
    root: Any


class XksKeyIdType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_.]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_.]+$', min_length=1, max_length=128)


class XksKeyInvalidConfigurationException(RootModel[Any]):
    root: Any


class XksKeyNotFoundException(RootModel[Any]):
    root: Any


class XksProxyAuthenticationAccessKeyIdType(RootModel[SecretStr]):
    root: SecretStr


class XksProxyAuthenticationRawSecretAccessKeyType(RootModel[SecretStr]):
    root: SecretStr


class XksProxyConnectivityType(Enum):
    PUBLIC_ENDPOINT = 'PUBLIC_ENDPOINT'
    VPC_ENDPOINT_SERVICE = 'VPC_ENDPOINT_SERVICE'


class XksProxyIncorrectAuthenticationCredentialException(RootModel[Any]):
    root: Any


class XksProxyInvalidConfigurationException(RootModel[Any]):
    root: Any


class XksProxyInvalidResponseException(RootModel[Any]):
    root: Any


class XksProxyUriEndpointInUseException(RootModel[Any]):
    root: Any


class XksProxyUriEndpointType(
    RootModel[
        constr(pattern=r'^https://[a-zA-Z0-9.-]+$', min_length=10, max_length=128)
    ]
):
    root: constr(pattern=r'^https://[a-zA-Z0-9.-]+$', min_length=10, max_length=128)


class XksProxyUriInUseException(RootModel[Any]):
    root: Any


class XksProxyUriPathType(
    RootModel[
        constr(
            pattern=r'^(/[a-zA-Z0-9\/_-]+/kms/xks/v\d{1,2})$|^(/kms/xks/v\d{1,2})$',
            min_length=10,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'^(/[a-zA-Z0-9\/_-]+/kms/xks/v\d{1,2})$|^(/kms/xks/v\d{1,2})$',
        min_length=10,
        max_length=128,
    )


class XksProxyUriUnreachableException(RootModel[Any]):
    root: Any


class XksProxyVpcEndpointServiceInUseException(RootModel[Any]):
    root: Any


class XksProxyVpcEndpointServiceInvalidConfigurationException(RootModel[Any]):
    root: Any


class XksProxyVpcEndpointServiceNameType(
    RootModel[
        constr(
            pattern=r'^com\.amazonaws\.vpce\.([a-z]+-){2,3}\d+\.vpce-svc-[0-9a-z]+$',
            min_length=20,
            max_length=64,
        )
    ]
):
    root: constr(
        pattern=r'^com\.amazonaws\.vpce\.([a-z]+-){2,3}\d+\.vpce-svc-[0-9a-z]+$',
        min_length=20,
        max_length=64,
    )


class XksProxyVpcEndpointServiceNotFoundException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    TrentService_CancelKeyDeletion = 'TrentService.CancelKeyDeletion'


class XAmzTarget1(Enum):
    TrentService_ConnectCustomKeyStore = 'TrentService.ConnectCustomKeyStore'


class XAmzTarget2(Enum):
    TrentService_CreateAlias = 'TrentService.CreateAlias'


class XAmzTarget3(Enum):
    TrentService_CreateCustomKeyStore = 'TrentService.CreateCustomKeyStore'


class XAmzTarget4(Enum):
    TrentService_CreateGrant = 'TrentService.CreateGrant'


class XAmzTarget5(Enum):
    TrentService_CreateKey = 'TrentService.CreateKey'


class XAmzTarget6(Enum):
    TrentService_Decrypt = 'TrentService.Decrypt'


class XAmzTarget7(Enum):
    TrentService_DeleteAlias = 'TrentService.DeleteAlias'


class XAmzTarget8(Enum):
    TrentService_DeleteCustomKeyStore = 'TrentService.DeleteCustomKeyStore'


class XAmzTarget9(Enum):
    TrentService_DeleteImportedKeyMaterial = 'TrentService.DeleteImportedKeyMaterial'


class XAmzTarget10(Enum):
    TrentService_DescribeCustomKeyStores = 'TrentService.DescribeCustomKeyStores'


class XAmzTarget11(Enum):
    TrentService_DescribeKey = 'TrentService.DescribeKey'


class XAmzTarget12(Enum):
    TrentService_DisableKey = 'TrentService.DisableKey'


class XAmzTarget13(Enum):
    TrentService_DisableKeyRotation = 'TrentService.DisableKeyRotation'


class XAmzTarget14(Enum):
    TrentService_DisconnectCustomKeyStore = 'TrentService.DisconnectCustomKeyStore'


class XAmzTarget15(Enum):
    TrentService_EnableKey = 'TrentService.EnableKey'


class XAmzTarget16(Enum):
    TrentService_EnableKeyRotation = 'TrentService.EnableKeyRotation'


class XAmzTarget17(Enum):
    TrentService_Encrypt = 'TrentService.Encrypt'


class XAmzTarget18(Enum):
    TrentService_GenerateDataKey = 'TrentService.GenerateDataKey'


class XAmzTarget19(Enum):
    TrentService_GenerateDataKeyPair = 'TrentService.GenerateDataKeyPair'


class XAmzTarget20(Enum):
    TrentService_GenerateDataKeyPairWithoutPlaintext = (
        'TrentService.GenerateDataKeyPairWithoutPlaintext'
    )


class XAmzTarget21(Enum):
    TrentService_GenerateDataKeyWithoutPlaintext = (
        'TrentService.GenerateDataKeyWithoutPlaintext'
    )


class XAmzTarget22(Enum):
    TrentService_GenerateMac = 'TrentService.GenerateMac'


class XAmzTarget23(Enum):
    TrentService_GenerateRandom = 'TrentService.GenerateRandom'


class XAmzTarget24(Enum):
    TrentService_GetKeyPolicy = 'TrentService.GetKeyPolicy'


class XAmzTarget25(Enum):
    TrentService_GetKeyRotationStatus = 'TrentService.GetKeyRotationStatus'


class XAmzTarget26(Enum):
    TrentService_GetParametersForImport = 'TrentService.GetParametersForImport'


class XAmzTarget27(Enum):
    TrentService_GetPublicKey = 'TrentService.GetPublicKey'


class XAmzTarget28(Enum):
    TrentService_ImportKeyMaterial = 'TrentService.ImportKeyMaterial'


class XAmzTarget29(Enum):
    TrentService_ListAliases = 'TrentService.ListAliases'


class XAmzTarget30(Enum):
    TrentService_ListGrants = 'TrentService.ListGrants'


class XAmzTarget31(Enum):
    TrentService_ListKeyPolicies = 'TrentService.ListKeyPolicies'


class XAmzTarget32(Enum):
    TrentService_ListKeys = 'TrentService.ListKeys'


class XAmzTarget33(Enum):
    TrentService_ListResourceTags = 'TrentService.ListResourceTags'


class XAmzTarget34(Enum):
    TrentService_ListRetirableGrants = 'TrentService.ListRetirableGrants'


class XAmzTarget35(Enum):
    TrentService_PutKeyPolicy = 'TrentService.PutKeyPolicy'


class XAmzTarget36(Enum):
    TrentService_ReEncrypt = 'TrentService.ReEncrypt'


class XAmzTarget37(Enum):
    TrentService_ReplicateKey = 'TrentService.ReplicateKey'


class XAmzTarget38(Enum):
    TrentService_RetireGrant = 'TrentService.RetireGrant'


class XAmzTarget39(Enum):
    TrentService_RevokeGrant = 'TrentService.RevokeGrant'


class XAmzTarget40(Enum):
    TrentService_ScheduleKeyDeletion = 'TrentService.ScheduleKeyDeletion'


class XAmzTarget41(Enum):
    TrentService_Sign = 'TrentService.Sign'


class XAmzTarget42(Enum):
    TrentService_TagResource = 'TrentService.TagResource'


class XAmzTarget43(Enum):
    TrentService_UntagResource = 'TrentService.UntagResource'


class XAmzTarget44(Enum):
    TrentService_UpdateAlias = 'TrentService.UpdateAlias'


class XAmzTarget45(Enum):
    TrentService_UpdateCustomKeyStore = 'TrentService.UpdateCustomKeyStore'


class XAmzTarget46(Enum):
    TrentService_UpdateKeyDescription = 'TrentService.UpdateKeyDescription'


class XAmzTarget47(Enum):
    TrentService_UpdatePrimaryRegion = 'TrentService.UpdatePrimaryRegion'


class XAmzTarget48(Enum):
    TrentService_Verify = 'TrentService.Verify'


class XAmzTarget49(Enum):
    TrentService_VerifyMac = 'TrentService.VerifyMac'


class AliasListEntry(BaseModel):
    AliasArn: Optional[ArnType] = None
    AliasName: Optional[AliasNameType] = None
    CreationDate: Optional[DateType] = None
    LastUpdatedDate: Optional[DateType] = None
    TargetKeyId: Optional[KeyIdType] = None


class CancelKeyDeletionRequest(BaseModel):
    KeyId: KeyIdType


class CancelKeyDeletionResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None


class ConnectCustomKeyStoreRequest(BaseModel):
    CustomKeyStoreId: CustomKeyStoreIdType


class CreateAliasRequest(BaseModel):
    AliasName: AliasNameType
    TargetKeyId: KeyIdType


class CreateCustomKeyStoreResponse(BaseModel):
    CustomKeyStoreId: Optional[CustomKeyStoreIdType] = None


class CreateGrantResponse(BaseModel):
    GrantId: Optional[GrantIdType] = None
    GrantToken: Optional[GrantTokenType] = None


class DecryptResponse(BaseModel):
    EncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    KeyId: Optional[KeyIdType] = None
    Plaintext: Optional[PlaintextType] = None


class DeleteImportedKeyMaterialRequest(BaseModel):
    KeyId: KeyIdType


class DescribeCustomKeyStoresRequest(BaseModel):
    CustomKeyStoreId: Optional[CustomKeyStoreIdType] = None
    CustomKeyStoreName: Optional[CustomKeyStoreNameType] = None
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None


class DisableKeyRequest(BaseModel):
    KeyId: KeyIdType


class DisableKeyRotationRequest(BaseModel):
    KeyId: KeyIdType


class EnableKeyRequest(BaseModel):
    KeyId: KeyIdType


class EnableKeyRotationRequest(BaseModel):
    KeyId: KeyIdType


class EncryptResponse(BaseModel):
    CiphertextBlob: Optional[CiphertextType] = None
    EncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    KeyId: Optional[KeyIdType] = None


class EncryptionContextType(RootModel[Optional[Dict[str, EncryptionContextValue]]]):
    root: Optional[Dict[str, EncryptionContextValue]] = None


class GenerateDataKeyPairResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None
    KeyPairSpec: Optional[DataKeyPairSpec] = None
    PrivateKeyCiphertextBlob: Optional[CiphertextType] = None
    PrivateKeyPlaintext: Optional[PlaintextType] = None
    PublicKey: Optional[PublicKeyType] = None


class GenerateDataKeyPairWithoutPlaintextResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None
    KeyPairSpec: Optional[DataKeyPairSpec] = None
    PrivateKeyCiphertextBlob: Optional[CiphertextType] = None
    PublicKey: Optional[PublicKeyType] = None


class GenerateDataKeyResponse(BaseModel):
    CiphertextBlob: Optional[CiphertextType] = None
    KeyId: Optional[KeyIdType] = None
    Plaintext: Optional[PlaintextType] = None


class GenerateDataKeyWithoutPlaintextResponse(BaseModel):
    CiphertextBlob: Optional[CiphertextType] = None
    KeyId: Optional[KeyIdType] = None


class GenerateMacResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None
    Mac: Optional[CiphertextType] = None
    MacAlgorithm: Optional[MacAlgorithmSpec] = None


class GenerateRandomRequest(BaseModel):
    CustomKeyStoreId: Optional[CustomKeyStoreIdType] = None
    NumberOfBytes: Optional[NumberOfBytesType] = None


class GenerateRandomResponse(BaseModel):
    Plaintext: Optional[PlaintextType] = None


class GetKeyPolicyRequest(BaseModel):
    KeyId: KeyIdType
    PolicyName: PolicyNameType


class GetKeyPolicyResponse(BaseModel):
    Policy: Optional[PolicyType] = None


class GetKeyRotationStatusRequest(BaseModel):
    KeyId: KeyIdType


class GetParametersForImportRequest(BaseModel):
    KeyId: KeyIdType
    WrappingAlgorithm: AlgorithmSpec
    WrappingKeySpec_1: WrappingKeySpec = Field(..., alias='WrappingKeySpec')


class GetParametersForImportResponse(BaseModel):
    ImportToken: Optional[CiphertextType] = None
    KeyId: Optional[KeyIdType] = None
    ParametersValidTo: Optional[DateType] = None
    PublicKey: Optional[PlaintextType] = None


class GetPublicKeyResponse(BaseModel):
    CustomerMasterKeySpec_1: Optional[CustomerMasterKeySpec] = Field(
        None, alias='CustomerMasterKeySpec'
    )
    EncryptionAlgorithms: Optional[EncryptionAlgorithmSpecList] = None
    KeyId: Optional[KeyIdType] = None
    KeySpec_1: Optional[KeySpec] = Field(None, alias='KeySpec')
    KeyUsage: Optional[KeyUsageType] = None
    PublicKey: Optional[PublicKeyType] = None
    SigningAlgorithms: Optional[SigningAlgorithmSpecList] = None


class GrantConstraints(BaseModel):
    EncryptionContextEquals: Optional[EncryptionContextType] = None
    EncryptionContextSubset: Optional[EncryptionContextType] = None


class GrantListEntry(BaseModel):
    Constraints: Optional[GrantConstraints] = None
    CreationDate: Optional[DateType] = None
    GrantId: Optional[GrantIdType] = None
    GranteePrincipal: Optional[PrincipalIdType] = None
    IssuingAccount: Optional[PrincipalIdType] = None
    KeyId: Optional[KeyIdType] = None
    Name: Optional[GrantNameType] = None
    Operations: Optional[GrantOperationList] = None
    RetiringPrincipal: Optional[PrincipalIdType] = None


class GrantTokenList(RootModel[List[GrantTokenType]]):
    root: List[GrantTokenType] = Field(..., max_length=10, min_length=0)


class ImportKeyMaterialRequest(BaseModel):
    EncryptedKeyMaterial: CiphertextType
    ExpirationModel: Optional[ExpirationModelType] = None
    ImportToken: CiphertextType
    KeyId: KeyIdType
    ValidTo: Optional[DateType] = None


class KeyList(RootModel[List[KeyListEntry]]):
    root: List[KeyListEntry]


class ListAliasesRequest(BaseModel):
    KeyId: Optional[KeyIdType] = None
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None


class ListGrantsRequest(BaseModel):
    GrantId: Optional[GrantIdType] = None
    GranteePrincipal: Optional[PrincipalIdType] = None
    KeyId: KeyIdType
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None


class ListKeyPoliciesRequest(BaseModel):
    KeyId: KeyIdType
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None


class ListKeysRequest(BaseModel):
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None


class ListKeysResponse(BaseModel):
    Keys: Optional[KeyList] = None
    NextMarker: Optional[MarkerType] = None
    Truncated: Optional[BooleanType] = None


class ListResourceTagsRequest(BaseModel):
    KeyId: KeyIdType
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None


class ListRetirableGrantsRequest(BaseModel):
    Limit: Optional[LimitType] = None
    Marker: Optional[MarkerType] = None
    RetiringPrincipal: PrincipalIdType


class MultiRegionKey(BaseModel):
    Arn: Optional[ArnType] = None
    Region: Optional[RegionType] = None


class MultiRegionKeyList(RootModel[List[MultiRegionKey]]):
    root: List[MultiRegionKey]


class PolicyNameList(RootModel[List[PolicyNameType]]):
    root: List[PolicyNameType]


class ReEncryptRequest(BaseModel):
    CiphertextBlob: CiphertextType
    DestinationEncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    DestinationEncryptionContext: Optional[EncryptionContextType] = None
    DestinationKeyId: KeyIdType
    GrantTokens: Optional[GrantTokenList] = None
    SourceEncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    SourceEncryptionContext: Optional[EncryptionContextType] = None
    SourceKeyId: Optional[KeyIdType] = None


class SignRequest(BaseModel):
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    Message: PlaintextType
    MessageType_1: Optional[MessageType] = Field(None, alias='MessageType')
    SigningAlgorithm: SigningAlgorithmSpec


class SignResponse(BaseModel):
    KeyId: Optional[KeyIdType] = None
    Signature: Optional[CiphertextType] = None
    SigningAlgorithm: Optional[SigningAlgorithmSpec] = None


class Tag(BaseModel):
    TagKey: TagKeyType
    TagValue: TagValueType


class TagKeyList(RootModel[List[TagKeyType]]):
    root: List[TagKeyType]


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    KeyId: KeyIdType
    Tags: TagList


class UntagResourceRequest(BaseModel):
    KeyId: KeyIdType
    TagKeys: TagKeyList


class VerifyMacRequest(BaseModel):
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    Mac: CiphertextType
    MacAlgorithm: MacAlgorithmSpec
    Message: PlaintextType


class VerifyRequest(BaseModel):
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    Message: PlaintextType
    MessageType_1: Optional[MessageType] = Field(None, alias='MessageType')
    Signature: CiphertextType
    SigningAlgorithm: SigningAlgorithmSpec


class XksKeyConfigurationType(BaseModel):
    Id: Optional[XksKeyIdType] = None


class XksProxyAuthenticationCredentialType(BaseModel):
    AccessKeyId: XksProxyAuthenticationAccessKeyIdType
    RawSecretAccessKey: XksProxyAuthenticationRawSecretAccessKeyType


class XksProxyConfigurationType(BaseModel):
    AccessKeyId: Optional[XksProxyAuthenticationAccessKeyIdType] = None
    Connectivity: Optional[XksProxyConnectivityType] = None
    UriEndpoint: Optional[XksProxyUriEndpointType] = None
    UriPath: Optional[XksProxyUriPathType] = None
    VpcEndpointServiceName: Optional[XksProxyVpcEndpointServiceNameType] = None


class AliasList(RootModel[List[AliasListEntry]]):
    root: List[AliasListEntry]


class CreateCustomKeyStoreRequest(BaseModel):
    CloudHsmClusterId: Optional[CloudHsmClusterIdType] = None
    CustomKeyStoreName: CustomKeyStoreNameType
    CustomKeyStoreType_1: Optional[CustomKeyStoreType] = Field(
        None, alias='CustomKeyStoreType'
    )
    KeyStorePassword: Optional[KeyStorePasswordType] = None
    TrustAnchorCertificate: Optional[TrustAnchorCertificateType] = None
    XksProxyAuthenticationCredential: Optional[XksProxyAuthenticationCredentialType] = (
        None
    )
    XksProxyConnectivity: Optional[XksProxyConnectivityType] = None
    XksProxyUriEndpoint: Optional[XksProxyUriEndpointType] = None
    XksProxyUriPath: Optional[XksProxyUriPathType] = None
    XksProxyVpcEndpointServiceName: Optional[XksProxyVpcEndpointServiceNameType] = None


class CreateGrantRequest(BaseModel):
    Constraints: Optional[GrantConstraints] = None
    GrantTokens: Optional[GrantTokenList] = None
    GranteePrincipal: PrincipalIdType
    KeyId: KeyIdType
    Name: Optional[GrantNameType] = None
    Operations: GrantOperationList
    RetiringPrincipal: Optional[PrincipalIdType] = None


class CreateKeyRequest(BaseModel):
    BypassPolicyLockoutSafetyCheck: Optional[BooleanType] = None
    CustomKeyStoreId: Optional[CustomKeyStoreIdType] = None
    CustomerMasterKeySpec_1: Optional[CustomerMasterKeySpec] = Field(
        None, alias='CustomerMasterKeySpec'
    )
    Description: Optional[DescriptionType] = None
    KeySpec_1: Optional[KeySpec] = Field(None, alias='KeySpec')
    KeyUsage: Optional[KeyUsageType] = None
    MultiRegion: Optional[NullableBooleanType] = None
    Origin: Optional[OriginType] = None
    Policy: Optional[PolicyType] = None
    Tags: Optional[TagList] = None
    XksKeyId: Optional[XksKeyIdType] = None


class CustomKeyStoresListEntry(BaseModel):
    CloudHsmClusterId: Optional[CloudHsmClusterIdType] = None
    ConnectionErrorCode: Optional[ConnectionErrorCodeType] = None
    ConnectionState: Optional[ConnectionStateType] = None
    CreationDate: Optional[DateType] = None
    CustomKeyStoreId: Optional[CustomKeyStoreIdType] = None
    CustomKeyStoreName: Optional[CustomKeyStoreNameType] = None
    CustomKeyStoreType_1: Optional[CustomKeyStoreType] = Field(
        None, alias='CustomKeyStoreType'
    )
    TrustAnchorCertificate: Optional[TrustAnchorCertificateType] = None
    XksProxyConfiguration: Optional[XksProxyConfigurationType] = None


class DecryptRequest(BaseModel):
    CiphertextBlob: CiphertextType
    EncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    EncryptionContext: Optional[EncryptionContextType] = None
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: Optional[KeyIdType] = None


class DescribeKeyRequest(BaseModel):
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType


class EncryptRequest(BaseModel):
    EncryptionAlgorithm: Optional[EncryptionAlgorithmSpec] = None
    EncryptionContext: Optional[EncryptionContextType] = None
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    Plaintext: PlaintextType


class GenerateDataKeyPairRequest(BaseModel):
    EncryptionContext: Optional[EncryptionContextType] = None
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    KeyPairSpec: DataKeyPairSpec


class GenerateDataKeyPairWithoutPlaintextRequest(BaseModel):
    EncryptionContext: Optional[EncryptionContextType] = None
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    KeyPairSpec: DataKeyPairSpec


class GenerateDataKeyRequest(BaseModel):
    EncryptionContext: Optional[EncryptionContextType] = None
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    KeySpec: Optional[DataKeySpec] = None
    NumberOfBytes: Optional[NumberOfBytesType] = None


class GenerateDataKeyWithoutPlaintextRequest(BaseModel):
    EncryptionContext: Optional[EncryptionContextType] = None
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    KeySpec: Optional[DataKeySpec] = None
    NumberOfBytes: Optional[NumberOfBytesType] = None


class GenerateMacRequest(BaseModel):
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType
    MacAlgorithm: MacAlgorithmSpec
    Message: PlaintextType


class GetPublicKeyRequest(BaseModel):
    GrantTokens: Optional[GrantTokenList] = None
    KeyId: KeyIdType


class GrantList(RootModel[List[GrantListEntry]]):
    root: List[GrantListEntry]


class ListAliasesResponse(BaseModel):
    Aliases: Optional[AliasList] = None
    NextMarker: Optional[MarkerType] = None
    Truncated: Optional[BooleanType] = None


class ListGrantsResponse(BaseModel):
    Grants: Optional[GrantList] = None
    NextMarker: Optional[MarkerType] = None
    Truncated: Optional[BooleanType] = None


class ListKeyPoliciesResponse(BaseModel):
    NextMarker: Optional[MarkerType] = None
    PolicyNames: Optional[PolicyNameList] = None
    Truncated: Optional[BooleanType] = None


class ListResourceTagsResponse(BaseModel):
    NextMarker: Optional[MarkerType] = None
    Tags: Optional[TagList] = None
    Truncated: Optional[BooleanType] = None


class MultiRegionConfiguration(BaseModel):
    MultiRegionKeyType_1: Optional[MultiRegionKeyType] = Field(
        None, alias='MultiRegionKeyType'
    )
    PrimaryKey: Optional[MultiRegionKey] = None
    ReplicaKeys: Optional[MultiRegionKeyList] = None


class ReplicateKeyRequest(BaseModel):
    BypassPolicyLockoutSafetyCheck: Optional[BooleanType] = None
    Description: Optional[DescriptionType] = None
    KeyId: KeyIdType
    Policy: Optional[PolicyType] = None
    ReplicaRegion: RegionType
    Tags: Optional[TagList] = None


class UpdateCustomKeyStoreRequest(BaseModel):
    CloudHsmClusterId: Optional[CloudHsmClusterIdType] = None
    CustomKeyStoreId: CustomKeyStoreIdType
    KeyStorePassword: Optional[KeyStorePasswordType] = None
    NewCustomKeyStoreName: Optional[CustomKeyStoreNameType] = None
    XksProxyAuthenticationCredential: Optional[XksProxyAuthenticationCredentialType] = (
        None
    )
    XksProxyConnectivity: Optional[XksProxyConnectivityType] = None
    XksProxyUriEndpoint: Optional[XksProxyUriEndpointType] = None
    XksProxyUriPath: Optional[XksProxyUriPathType] = None
    XksProxyVpcEndpointServiceName: Optional[XksProxyVpcEndpointServiceNameType] = None


class CustomKeyStoresList(RootModel[List[CustomKeyStoresListEntry]]):
    root: List[CustomKeyStoresListEntry]


class DescribeCustomKeyStoresResponse(BaseModel):
    CustomKeyStores: Optional[CustomKeyStoresList] = None
    NextMarker: Optional[MarkerType] = None
    Truncated: Optional[BooleanType] = None


class KeyMetadata(BaseModel):
    AWSAccountId: Optional[AWSAccountIdType] = None
    Arn: Optional[ArnType] = None
    CloudHsmClusterId: Optional[CloudHsmClusterIdType] = None
    CreationDate: Optional[DateType] = None
    CustomKeyStoreId: Optional[CustomKeyStoreIdType] = None
    CustomerMasterKeySpec_1: Optional[CustomerMasterKeySpec] = Field(
        None, alias='CustomerMasterKeySpec'
    )
    DeletionDate: Optional[DateType] = None
    Description: Optional[DescriptionType] = None
    Enabled: Optional[BooleanType] = None
    EncryptionAlgorithms: Optional[EncryptionAlgorithmSpecList] = None
    ExpirationModel: Optional[ExpirationModelType] = None
    KeyId: KeyIdType
    KeyManager: Optional[KeyManagerType] = None
    KeySpec_1: Optional[KeySpec] = Field(None, alias='KeySpec')
    KeyState_1: Optional[KeyState] = Field(None, alias='KeyState')
    KeyUsage: Optional[KeyUsageType] = None
    MacAlgorithms: Optional[MacAlgorithmSpecList] = None
    MultiRegion: Optional[NullableBooleanType] = None
    MultiRegionConfiguration_1: Optional[MultiRegionConfiguration] = Field(
        None, alias='MultiRegionConfiguration'
    )
    Origin: Optional[OriginType] = None
    PendingDeletionWindowInDays: Optional[PendingWindowInDaysType] = None
    SigningAlgorithms: Optional[SigningAlgorithmSpecList] = None
    ValidTo: Optional[DateType] = None
    XksKeyConfiguration: Optional[XksKeyConfigurationType] = None


class ReplicateKeyResponse(BaseModel):
    ReplicaKeyMetadata: Optional[KeyMetadata] = None
    ReplicaPolicy: Optional[PolicyType] = None
    ReplicaTags: Optional[TagList] = None


class CreateKeyResponse(BaseModel):
    KeyMetadata_1: Optional[KeyMetadata] = Field(None, alias='KeyMetadata')


class DescribeKeyResponse(BaseModel):
    KeyMetadata_1: Optional[KeyMetadata] = Field(None, alias='KeyMetadata')
